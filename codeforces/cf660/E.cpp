/*
 %=%=%+*++%=%@@###@###@@%%%%======++++++=======%%%%====%%%%%%@@@@@@@%%@@%=*--:+%@###########%%%@@+=#######@##
%%+%++%=%%=@@##@#@#@#@@@@%%%%======+======+============%%%%%@@@@@@@####@@%%=%@##########@##*@=%@==@####@##@@
=%=*=%=@%%@%##@#%@#@#@#@@%%=%===========+++==============%%%%@@@@@@########@##########@####%%%%===%%%##@##@#
@+===@=%@%@@@##@#%##@#%#@@%%==========++++==========%%=%%%%%@@@@@@@################@##@##@##@%+:-:==+=@##@##
%+%%+@@=@@%@@@#@##%#@##%@%@=%=====================%%%%%%%%%%@@@@@@@@@@###############@##@##@#@%==++@%%#@##@#
%+%@+@@%@@%@#@#@@#%##@#%@%@=%=%===========%===%%=%%%%%%@@@@@@####@@@@@@@@#######@##@##@##@##@@@%@@@@#@@@@@@#
%=%%=@@%@@%@@@#@@@%#@@#@#%@=%%%%%===========%=%=%%%%%@@@@######@#################@@#@@#@@@@@@@@%@@@##@##@##@
%@@=%@%@@%@@%##%@%@#@#@#@@%@%%%%%========%%%====%%@@@@@##############@###########@@@%@@@@#@@#@@#@###@##@##@#
%@@%@@%@@@@@%#@@@=@@#@@@@%%%@%%%%%%%==%%%%====%@@@@#@@@@@##########################@#@%@@@##@##@##@@@%@@%@@%
@@%@@=@@%#@%@%@#%@@@@@@@%@%@%%%%%%%%%%%====%%%@@@@@%%%%%%@@########################@@#@%%@%@@@@@@@@@@@@@@@@%
@%@@%%@%@#%@@%@%@@@@@@@%%%%@@@@%%%%%%====%@@##@%@@################@@%%@@#@@@@@@####@@@@%@%%%@%@@@@@%@@@@@%@@
@%@%@@%@@%@@%@%@@@%@@@%%%%@@@@@@%%%%%%===@@##@@@@############=%@#@@##########@@@@%@@@@@@@@%%%@%%@@@@@@@#@#@@
@#@%@@@@%@@%@%@%@%%%%%%%@@@@@@@@%%%%%===@#########@##@%%@####@%@####@####################@%===%%%%@%@@%@@@@@
#@%@@%@%%@%@%@@@%@===+====%@@@@%%%%====@#########%%%=++++===%@@#####@@@@%%%%%@####@#######@======%%%%%%@@%@@
@%#@@@%@@%@%@%@%%%=+*--:*+=%@@%%%%==+++@########%@%=*+:-------*+++=++***::*+==%###########@=====%=%%%%%%@@%%
%@@%#@@@%@%@%%%%%==+:-::+=%%%%%%%==+++*%########%@=*+:-.........-......----:*+=%@###########%======+***+%=%%
@@%@%@@%@%@%%%%%@%%%=+=%%@@@%%%===++**+@########%%+:*-....................--:*=%@@###########=++===*+===++++
@%@%@@@@@%%%%=%@@@@@@%@@@#@%@%===++**:=#########%@**:-....................---:+%@%############+++==*+=%====+
%@%@@%%@%%%%%@%%@@@%@@%@@@@%%%%=++**:::#########%#+*-........ ............---:+@%%###########@**++==*****+++
@%@%%%%%%%%@%@@%%@@@@@@@@@@%%%==+**::--:########@%+*--...................----:+@=%###########=+*+*:**:...-**
%%%%=%%%=@@%%%%%%%%@@@@@%%%====++*::---#########@%+:--...................--:***+@@##########@+::::**:+**+=+=
@%%%===%%%%%%%%%%%%%%@%===+*+*+++*::--=#########%+=%===+:-............-:*=%%@@@%==@########@%+::*****=:.--:=
%%%%=++=%%%%%%%==%%%%%%=+*:-::****::-.+######@%#%==%=+++=@@%+:-....-+%%=+***++==%%@#++#######%-::***+:-::*::
%%%=%%%%=======%%==%%%==+*::::***:::-..#@####@+@%+++%#++%===+++:..:+++%++%%+#@=+=%@%*:%#######::**++=*-::+++
%==%%==========%%%%=%%%==+*******::--..:%#####:=%*:::+++**::----..-*:---:*+=+*::+=#=*:#####*---::***++:-:*+=
=%%=========+=====%%%=%%%%=+=++**::--..*@#####++@+:------.....--..-*:-..-------:+=#%**###@:.---::***+++:-***
%%%=====+======+===%%%%=%%%==++**::--..*######%+@+*:-........---..-**-......--:*+=#@:+####:.---::***+++**:*+
==+++++++++++====+==%%%======+++*::--...%#@###=*@=+:--......-:-....:**-.....--*+==#@+#####=..--::******:**:*
+++++++++++++++======%%====+=+++**:--...:@%@#####%=*:--...-::--....-::*:-----:*+==########@.---::::::::--:::
+++++++++++++++++++=========+*++**::--....@######@=+*:------:++++***+*:*:::::*+++%########*.---::::---....-:
+++++++**::*+++::**+===%==+*::::***:---...-#######%+*:::*=%%%@@%@=@@@@##@%*::***+@######=-..--:**+++++-....-
+++++++*-:*++*+**+**+=+==+*:..-:*::::--....-=######%+*:*%@%+***::-:*+===%@=::**+@####*....---:****:::***--.-
%%=+++++++**+*****::*+++==+++******:::--....  .=@+=#%+++=+:-:::-::::***::+==++%@%+:. .......-:::-..-:::+=*:-
%%%=++++++***:::---:****+====++++***::---...    -+%+###@%*---::---::::---+@#@@##=*..........-::--:-:***+=+**
@@%@%=+++***:::---.---:*************:::---...    .=++###@%*----:**:----:=@######@+..........-*+::**+++++++**
@##%%=+++*:::--............:***:****:::----..    -+=+#####@+-.......--:+@########=-..--*+*:-:+++***+++++=++*
####@@%=*+***:--..........*+=++*+++***:::--:**--%%+==######@=*::::::**=@##@##@@@@=%@@%%%%@%==++++:::::*+%%+:
###@@%+*.:+**:---....--:***+++**=++++**::*+=%=%=%====#@@@##@@@########@@@@@@@@@%%%%@%%===%%%%==*:::::-:=%%+:
#@%%%%=======++:::----::**++**+==+==+=+++++=%+++=%=+%%%%%@@@@@########@@%%==%%%%%%=====++=++::::::----:%%%*:
#@@@@%%%%@%%%%%+++*+===+*::::*:::::***+===+==++++=++========%%@@###@@@%%==++===%%%%==++++++*:::-------+%%+-:
@@@@@@%@%%%@@@@%%@@%%%%%.▮▮▮▮▮▮▮▮▮▮▮▮▮.++++++****+++++++++++==%%@@@%%===++++=====+=%*--::::::-----...:%%%**-
#@@@@@@@%%%@@%@%%@@%%%%%.▮▮ :+***++ ▮▮.**++++******++*******+*=======++*****:*+**:***:-:::::-----.--*%%%+-..
%%%%%%@@@@%%%%%%%%%@@@%%.▮▮ .-+**+* ▮▮.:*:▮▮▮***: ▮▮▮:**- ▮▮▮▮▮▮ *++++* ▮▮▮▮▮▮▮▮.-:::.▮▮▮▮▮▮▮.**++++%%%-....
@%=@@@%%%@%%%@@%%%@@%%=%.▮▮ --+***: ▮▮.:*:▮▮▮:**▮▮▮▮▮:*-   :** ▮▮ *+++*▮▮▮-:: ▮▮.::: ▮▮.::* ▮▮ ::-:%%=-...--
%=%%@@#%=@%%%@@@%%@@%%%%.▮▮ .*++**: ▮▮.::-▮▮▮*:▮▮ ▮▮▮**++++    ▮▮.**:*: ▮▮-:: ▮▮.::-:::-...  ▮ --*%%+-..----
@%+%%%@@=%#@@%%@%%@%%@@@.▮▮ :****** ▮▮.++:▮▮▮:▮▮--▮▮▮**+***▮▮▮▮▮▮----:- ▮ ::- ▮▮.:::. ▮▮▮▮▮▮▮▮ :=%=:-..-.---
%@@=+=%@@@#@%%@%%=:.+%@@.▮▮ **+==%+ ▮▮-++:▮▮▮▮▮:+-▮▮▮**:--:**:-▮▮▮.--.▮▮ .--- ▮▮.:*: ▮▮-**+- ▮ %=:-..... ..-
@%@#@@@@%%==%@@%%%@=++==.▮▮.@@@%%=+ ▮▮.++:▮▮▮ *++-▮▮▮:*-       ▮▮ . ▮▮▮▮▮▮▮▮▮▮▮▮▮▮.: ▮▮▮▮▮▮▮▮▮ --....-------
+@%=%%%%%@@%%%%%%%%@=++*::::=%@==%%:--:***---*+++*---:::::▮▮▮▮▮▮▮.. ▮▮▮..       ▮▮ ...    ..   ......----:::
+==%%==%+++=%%%=%%%%====%%%%%%%%@@@@%+***::::***:::::***::::::--.... ▮▮.-....  ▮▮▮ ... .       .....------::
==@@==%@%%%=+%%%=%@%%%%@@@@@@@@@@@@@@=::::::::::::::::::::::::------.........      ......    ....  ...---:::
=%%=%@%%%%%==%%%%%%%=%@@#@%%%%=@####@%****:::::::::::::::::::::::------...               ........-----.
@==%==%%==%@@%==%%%=%==+%@@@@%@@@@++**::::::::::::::::::::::::::::::---.      .... .           ..--.---..-::
%%%==@=++=%%@@@@%%=+::--:*%%%%@%=%%=::*******::::::::::::::--:::::::::..................             . . ...
 */
#ifdef LOCAL
#define _GLIBCXX_DEBUG
#endif

#include <bits/stdc++.h>

using namespace std;

#define ALL(a) a.begin(), a.end()
#define RALL(a) a.rbegin(), a.rend()
#define FF first
#define SS second

using ll = long long;
using ld = long double;

#define int ll

template<typename T>
using vec = std::vector<T>;

template<typename T>
using uset = std::unordered_set<T>;

template<typename T1, typename T2>
using umap = std::unordered_map<T1, T2>;

constexpr ll INFL = 1'000'000'000'000'000'228;
constexpr int INFI = 1'000'000'228;
const ld PI = acos(-1);
std::mt19937 rnd(std::chrono::steady_clock::now().time_since_epoch().count());

vec<pair<int, int>> DD = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

#ifdef LOCAL
#else
#endif

constexpr long double EPS = 1e-8;

using FET = ld;

struct FloatEps {
  FET val;
  explicit FloatEps(FET val) : val(val) {}
  FloatEps() : val(0) {}
  operator FET() const {
    return val;
  }
  inline FloatEps& operator+=(FloatEps oth) {
    val += oth.val;
    return *this;
  }
  inline FloatEps& operator-=(FloatEps oth) {
    val -= oth.val;
    return *this;
  }
  inline FloatEps& operator*=(FloatEps oth) {
    val *= oth.val;
    return *this;
  }
  inline FloatEps &operator/=(FloatEps oth) {
    val /= oth.val;
    return *this;
  }
};

inline FloatEps operator+(FloatEps a, FloatEps b) {
  return a += b;
}


inline FloatEps operator-(FloatEps a, FloatEps b) {
  return a -= b;
}


inline FloatEps operator*(FloatEps a, FloatEps b) {
  return a *= b;
}


inline FloatEps operator/(FloatEps a, FloatEps b) {
  return a /= b;
}

inline FloatEps operator-(FloatEps a) {
  return FloatEps(-a.val);
}

inline bool operator==(FloatEps a, FloatEps b) {
  return fabs(a.val - b.val) <= EPS;
}


inline bool operator!=(FloatEps a, FloatEps b) {
  return fabs(a.val - b.val) > EPS;
}


inline bool operator<(FloatEps a, FloatEps b) {
  return b.val - a.val > EPS;
}


inline bool operator>(FloatEps a, FloatEps b) {
  return a.val - b.val > EPS;
}


inline bool operator<=(FloatEps a, FloatEps b) {
  return a < b || a == b;
}


inline bool operator>=(FloatEps a, FloatEps b) {
  return a > b || a == b;
}

using ldp = FloatEps;

#ifdef LOCAL
#else
#endif

struct Pt {
  ldp x, y;
  Pt(ldp xx, ldp yy)
      : x(xx), y(yy)
  {}
  Pt() : Pt(ldp(0), ldp(0)) {}
};

Pt operator+(Pt a, Pt b) {
  return Pt(a.x + b.x, a.y - b.y);
}

Pt operator-(Pt a, Pt b) {
  return Pt(a.x - b.x, a.y - b.y);
}

ldp operator*(Pt a, Pt b) {
  return a.x * b.y - a.y * b.x;
}

ldp operator%(Pt a, Pt b) {
  return a.x * b.x + a.y * b.y;
}

struct Seg {
  Pt p, q;
  Seg(Pt p, Pt q) : p(p), q(q) {}
  Seg() : Seg(Pt(), Pt()) {}
};

struct Line {
  ldp A, B, C;
  Line(ldp a, ldp b, ldp c)
      : A(a), B(b), C(c) {}
  Line() : Line(ldp(0), ldp(0), ldp(0)) {}
  explicit Line(Seg s) {
    A = s.p.y - s.q.y;
    B = s.q.x - s.p.x;
    C = -(A * s.p.x) - B * s.p.y;
  }
  pair<ldp, ldp> norm() {
    if (B == ldp(0)) {
      return {ldp(0), ldp(0)};
    }
    return {-(A/B), -(C/B)};
  }
};

Pt inter(Line ln1, Line ln2) {
  ldp x = -(ln1.C * ln2.B - ln2.C * ln1.B) / (ln1.A * ln2.B - ln2.A * ln1.B);
  ldp y = -(ln1.A * ln2.C - ln2.A * ln1.C) / (ln1.A * ln2.B - ln2.A * ln1.B);
  return Pt(x, y);
}

bool half_pon(Seg s, Pt p) {
  return (s.p % (s.q - p)) >= ldp(0);
}

bool pon(Seg s, Pt p) {
  return half_pon(s, p) && half_pon(Seg(s.q, s.p), p);
}

bool is_inter(Line ln, Seg s) {
  Pt p = inter(ln, Line(s));
  return pon(s, p);
}

void run() {
  int n;
  cin >> n;
  vec<pair<Pt, Pt>> pts(n);
  for (int i = 0; i < n; i++) {
    int x1, x2, y;
    cin >> x1 >> x2 >> y;
    pts[i].first = Pt(ldp(x1), ldp(y));
    pts[i].second = Pt(ldp(x2), ldp(y));
  }
  vec<pair<ldp, int>> sweep_line(5);
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      if (i != j && pts[i].first.y > pts[j].first.y && pts[i].first.x <= pts[j].second.x) {
        ldp angle1(max((ld)0.0, -atan2(pts[i].second * pts[j].first, pts[i].second % pts[i].first)));
        ldp angle2(fabs(atan2(pts[i].first * pts[j].second, pts[i].first % pts[j].second)));
        sweep_line.emplace_back(angle1, 1);
        sweep_line.emplace_back(angle2, -1);
      }
    }
  }
  sort(ALL(sweep_line), [](const auto &a, const auto &b){
    if (a.first == b.first) {
      return a.second > b.second;
    }
    return a.first < b.first;
  });
  if (sweep_line.empty() || sweep_line[0].first > ldp(0)) {
    cout << ld(0) << '\n';
    return;
  }
  ldp ans;
  int cr = 0;
  for (auto [angle, dt] : sweep_line) {
    cr += dt;
    if (cr == 0) {
      ans = angle;
      break;
    }
  }
  Line ln(Seg(Pt(ldp(0), ldp(0)), Pt(ldp(1), ldp(0))));
  Pt nrm(ldp(0), ldp(-1));
  Pt nw;
  nw.x = nrm.x * ldp(cos(ans)) - nrm.y * ldp(sin(ans));
  nw.y = nrm.x * ldp(sin(ans)) + nrm.y * ldp(cos(ans));
  ldp max_x(INFL), max_x2;
  for (int i = 0; i < n; i++) {
    auto itt = inter(Line(Seg(pts[i].second, pts[i].second + nw)), ln);
    max_x2 = max(itt.x, max_x2);
    auto itt2 = inter(Line(Seg(pts[i].first, pts[i].first + nw)), ln);
    max_x = min(max_x, itt2.x);
  }
  cout << fabs((max_x2 - max_x).val) << '\n';
}

signed main() {
#ifdef LOCAL
  std::freopen("input.txt", "r", stdin);
#else
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
#endif
  int t = 1;
  //cin >> t;
  cout << fixed << setprecision(20);
  while (t--) {
    run();
  }
  return 0;
}


